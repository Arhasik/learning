import java.util.*
import kotlin.concurrent.fixedRateTimer

const val PI: Double = 3.14159
fun main() {
//    Создайте константу PI типа Double и присвойте ей значение 3.14159.
//    Напишите программу, которая вычисляет площадь круга с радиусом r,
//    где r - значение переменной типа Double, и выводит результат на экран.
    println("Enter radius circle")

    val radiusString: String? = readLine()
    if (radiusString?.matches("""\d+""".toRegex()) == true)
    {
        val radiusDouble = radiusString.toDouble()
        val areaOfCircle: Double = PI * radiusDouble * radiusDouble

        println("Area of circle = ${"%.2f".format(areaOfCircle)}")

    }
    else {
        println("Error. Enter number")
    }
}
//    Функция matches проверяет, все ли строки совпадают с заданным регулярным выражением.
//    Функция toRegex преобразует строку в экземпляр типа Regex, который должен передаваться функ-
//    ции matches. Строка, передаваемая toRegex, содержит регулярное выражение \d+,
//    которое означает «одна или более цифр». В этом регулярном выражении \d обо-
//    значает любую цифру от 0 до 9, а знак + обозначает одно или несколько вхождений
//    символа слева от него.
//    Функция format()  округляет Double с заданной точностью. Использует эту строку в качестве строки формата
//    и возвращает строку, полученную путем замены спецификаторов формата в строке формата предоставленными аргументами
//    В вызове format() также определяется строка формата "%.2f". Строка формата с помощью специального набора символов
//    определяет, как нужно отформатировать данные. Конкретно этот формат указывает, что число с плавающей точкой должно
//    округляться до 2-го десятичного знака.


